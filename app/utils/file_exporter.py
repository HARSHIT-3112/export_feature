
from docx import Document
import io
from bs4 import BeautifulSoup
from fpdf import FPDF

def _hex_to_rgb(hex_color: str):
    hex_color = hex_color.lstrip("#")
    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

class StyledPDF(FPDF):
    def header(self):
        # Optional header if needed
        pass

    def footer(self):
        self.set_y(-15)
        self.set_font("Helvetica", "I", 8)
        self.set_text_color(120, 120, 120)
        self.cell(0, 10, f"Page {self.page_no()}", align="C")

def export_to_pdf(content, meta, include_cover_page, page_size, style: dict):
    """Generate a styled, structured PDF manually (no HTML renderer)."""

    # Extract style config
    font_family = style.get("font_family", "Helvetica")
    font_size = int(style.get("font_size", "12"))
    heading_color = _hex_to_rgb(style.get("heading_color", "#2a7ae2"))
    text_color = _hex_to_rgb(style.get("text_color", "#000000"))
    margin = int(style.get("margin", "15"))
    align = style.get("align", "L").upper()  # L, C, R, J
    line_height = float(style.get("line_height", "1.5"))
    cover_color = _hex_to_rgb(style.get("cover_color", "#2a7ae2"))
    cover_font_size = int(style.get("cover_font_size", "28"))

    pdf = StyledPDF(orientation='P', unit='mm', format=page_size or "A4")
    pdf.set_auto_page_break(auto=True, margin=margin)
    pdf.add_page()

    # ✅ Cover page
    if include_cover_page:
        pdf.set_font(font_family, "B", cover_font_size)
        pdf.set_text_color(*cover_color)
        pdf.cell(0, 80, meta.get("title", "Untitled Document"), ln=True, align="C")
        pdf.set_font(font_family, "", 14)
        pdf.set_text_color(100, 100, 100)
        pdf.cell(0, 10, "Generated by LawVriksh Export Service", ln=True, align="C")
        pdf.add_page()

    # ✅ Content rendering
    pdf.set_left_margin(margin)
    pdf.set_right_margin(margin)
    pdf.set_font(font_family, "", font_size)
    pdf.set_text_color(*text_color)

    soup = BeautifulSoup(content, "html.parser")

    for element in soup.children:
        if element.name in ["h1", "h2", "h3"]:
            pdf.set_font(font_family, "B", font_size + (6 if element.name == "h1" else 4))
            pdf.set_text_color(*heading_color)
            pdf.multi_cell(0, 8 * line_height, element.get_text(strip=True), align="L")
            pdf.ln(2)
            pdf.set_font(font_family, "", font_size)
            pdf.set_text_color(*text_color)

        elif element.name == "p":
            pdf.multi_cell(0, 6 * line_height, element.get_text(strip=True), align=align)
            pdf.ln(2)

        elif element.name in ["ul", "ol"]:
            for li in element.find_all("li"):
                pdf.cell(5)
                pdf.multi_cell(0, 6 * line_height, f"• {li.get_text(strip=True)}", align=align)
            pdf.ln(3)

        elif element.name is None and element.string:
            pdf.multi_cell(0, 6 * line_height, element.string.strip(), align=align)
            pdf.ln(2)

    pdf_bytes = pdf.output(dest="S").encode("latin1")
    buffer = io.BytesIO(pdf_bytes)
    buffer.seek(0)
    return buffer



# ✅ DOCX Export (BeautifulSoup-based)
def export_to_docx(content: str, meta: dict, include_cover_page: bool) -> io.BytesIO:
    """Converts HTML to DOCX with basic formatting."""
    soup = BeautifulSoup(content, "html.parser")
    doc = Document()

    if include_cover_page:
        doc.add_heading(meta.get("title", "Untitled Document"), level=1)
        doc.add_paragraph("")

    for element in soup.find_all(["h1", "h2", "h3", "p", "ul", "ol", "li"]):
        if element.name.startswith("h"):
            doc.add_heading(element.get_text(), level=int(element.name[1]))
        elif element.name == "p":
            doc.add_paragraph(element.get_text())
        elif element.name in ["ul", "ol"]:
            for li in element.find_all("li"):
                doc.add_paragraph("• " + li.get_text())

    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer
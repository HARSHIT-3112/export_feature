import io
from bs4 import BeautifulSoup
from fpdf import FPDF, HTMLMixin


class PDF(FPDF, HTMLMixin):
    """FPDF subclass with HTML and footer support."""
    def footer(self):
        self.set_y(-15)
        self.set_font("Helvetica", "I", 8)
        self.set_text_color(150, 150, 150)
        self.cell(0, 10, f"Page {self.page_no()}", align="C")


def clean_html(html: str) -> str:
    """Simplify HTML so fpdf2 can safely render it."""
    try:
        soup = BeautifulSoup(html, "html.parser")
        for tag in soup.find_all(True):
            tag.attrs = {}  # remove inline styles or unsupported attributes
        return str(soup)
    except Exception:
        return f"<p>{html}</p>"


def export_to_pdf(content, meta, include_cover_page, page_size):
    """Generate a PDF with a proper standalone cover page first."""
    pdf = PDF(orientation="P", unit="mm", format=page_size or "A4")
    pdf.set_auto_page_break(auto=True, margin=15)

    # ✅ COVER PAGE
    if include_cover_page:
        pdf.add_page()
        pdf.set_font("Helvetica", "B", 26)
        pdf.set_text_color(42, 122, 226)

        title = meta.get("title", "Untitled Document")
        pdf.ln(80)
        pdf.multi_cell(0, 15, title, align="C")

        pdf.ln(10)
        pdf.set_font("Helvetica", "I", 13)
        pdf.set_text_color(100, 100, 100)

        author = meta.get("author", "Unknown")
        category = meta.get("category", "-")
        created_at = meta.get("created_at", "-")

        pdf.cell(0, 10, f"Author: {author}", ln=True, align="C")
        pdf.cell(0, 10, f"Category: {category}", ln=True, align="C")
        pdf.cell(0, 10, f"Created At: {created_at}", ln=True, align="C")

        pdf.ln(10)
        pdf.set_text_color(150, 150, 150)
        pdf.cell(0, 10, "Generated by LawVriksh Export Service", ln=True, align="C")

        # Add a NEW PAGE for actual content
        pdf.add_page()
    else:
        pdf.add_page()

    # ✅ DOCUMENT BODY
    pdf.set_font("Helvetica", "", 12)
    pdf.set_text_color(0, 0, 0)

    simplified_html = clean_html(content)
    try:
        pdf.write_html(simplified_html)
    except Exception:
        pdf.multi_cell(0, 10, BeautifulSoup(content, "html.parser").get_text())

    # ✅ Return as BytesIO (NO ENCODE)
    pdf_bytes = pdf.output(dest="S")
    buffer = io.BytesIO(bytes(pdf_bytes))
    buffer.seek(0)
    return buffer



from docx import Document
# ✅ DOCX Export (BeautifulSoup-based)
def export_to_docx(content: str, meta: dict, include_cover_page: bool) -> io.BytesIO:
    """Converts HTML to DOCX with basic formatting."""
    soup = BeautifulSoup(content, "html.parser")
    doc = Document()

    if include_cover_page:
        doc.add_heading(meta.get("title", "Untitled Document"), level=1)
        doc.add_paragraph("")

    for element in soup.find_all(["h1", "h2", "h3", "p", "ul", "ol", "li"]):
        if element.name.startswith("h"):
            doc.add_heading(element.get_text(), level=int(element.name[1]))
        elif element.name == "p":
            doc.add_paragraph(element.get_text())
        elif element.name in ["ul", "ol"]:
            for li in element.find_all("li"):
                doc.add_paragraph("• " + li.get_text())

    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer
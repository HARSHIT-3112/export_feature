
from docx import Document
import io
from bs4 import BeautifulSoup
from fpdf import FPDF, HTMLMixin

class PDF(FPDF, HTMLMixin):
    def footer(self):
        self.set_y(-15)
        self.set_font("Helvetica", "I", 8)
        self.set_text_color(150, 150, 150)
        self.cell(0, 10, f"Page {self.page_no()}", align="C")

def clean_html(html: str) -> str:
    """Simplify HTML so fpdf2 can render it."""
    soup = BeautifulSoup(html, "html.parser")
    # Remove unsupported tags and inline CSS
    for tag in soup.find_all(True):
        tag.attrs = {}
    return str(soup)

def export_to_pdf(content, meta, include_cover_page, page_size):
    pdf = PDF(orientation='P', unit='mm', format=page_size or "A4")
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()

    # ✅ Cover page
    if include_cover_page:
        pdf.set_font("Helvetica", "B", 22)
        pdf.set_text_color(42, 122, 226)
        pdf.cell(0, 80, meta.get("title", "Untitled Document"), ln=True, align="C")
        pdf.set_font("Helvetica", "I", 12)
        pdf.set_text_color(100, 100, 100)
        pdf.cell(0, 10, "Generated by LawVriksh Export Service", ln=True, align="C")
        pdf.add_page()

    # ✅ Document body
    pdf.set_font("Helvetica", "", 12)
    pdf.set_text_color(0, 0, 0)

    simplified_html = clean_html(content)
    pdf.write_html(simplified_html)

    pdf_bytes = pdf.output(dest="S")
    buffer = io.BytesIO(bytes(pdf_bytes))
    buffer.seek(0)
    return buffer





# ✅ DOCX Export (BeautifulSoup-based)
def export_to_docx(content: str, meta: dict, include_cover_page: bool) -> io.BytesIO:
    """Converts HTML to DOCX with basic formatting."""
    soup = BeautifulSoup(content, "html.parser")
    doc = Document()

    if include_cover_page:
        doc.add_heading(meta.get("title", "Untitled Document"), level=1)
        doc.add_paragraph("")

    for element in soup.find_all(["h1", "h2", "h3", "p", "ul", "ol", "li"]):
        if element.name.startswith("h"):
            doc.add_heading(element.get_text(), level=int(element.name[1]))
        elif element.name == "p":
            doc.add_paragraph(element.get_text())
        elif element.name in ["ul", "ol"]:
            for li in element.find_all("li"):
                doc.add_paragraph("• " + li.get_text())

    buffer = io.BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer
